import Aldo.*
import pintores.*
import pintura.*
import Cliente.*
import Casa.*
import Ambiente.*
import Agencia.*
import Arquitecto.*
import MMdeObras.*
import Plomero.*
import Electricista.*
import Albanil.*
import Trabajo.*

object fixture {
	
  method aumentarAhorro(aldo, ahorro){
  	 aldo.ahorros(aldo.ahorros() + ahorro)
  }
  
  method aumentarPrecioLataPintura(pintura, nuevoPrecio){
  	pintura.precio(nuevoPrecio)
  }
  
  method aldoConAhorrosYCasa(){
  	aldo.ahorros(6000)
	aldo.casa(new Casa(1,[habitacion, new Ambiente(1,2,3.5)]))

	var trabajo1 = new Trabajo()
	var trabajosContratados = [] 
	var maestro = new MMdeObras(53.00)
	maestro.categorizar()
	maestro.fechaInicioActividad(new Date())
	
	trabajo1.contratista(maestro)
	trabajo1.gasto(3434.00)
	trabajo1.fecha(new Date())
	
	var trabajo2 = new Trabajo()
	var arquitecto = new Arquitecto(543.00)
	arquitecto.categorizar()
	arquitecto.fechaInicioActividad(new Date())
	trabajo2.contratista(arquitecto)
	trabajo2.gasto(334.00)
	trabajo2.fecha(new Date())
	
	trabajosContratados.add(trabajo1)
	trabajosContratados.add(trabajo2)

	aldo.trabajosContratados(trabajosContratados)	
	return aldo
  }
  
  method agencia(){
  	var emanuel = new Arquitecto(100000.00)
  	emanuel.fechaInicioActividad(new Date())
  	emanuel.categorizar()
  	var marcos = new MMdeObras(50000.00)
   	marcos.fechaInicioActividad(new Date())
  	marcos.categorizar()
  	var noelia = new Electricista(250.00)
  	noelia.fechaInicioActividad(new Date())
  	noelia.categorizar()
  	var silvana = new Plomero()
  	silvana.fechaInicioActividad(new Date())
  	silvana.categorizar()
	silvana.recargo(25.00)
  	var eliana = new MMdeObras(12000.00)
  	eliana.fechaInicioActividad(new Date())
  	eliana.categorizar()
  	var dodain = new Albanil(3)
  	dodain.fechaInicioActividad(new Date())
  	dodain.categorizar()
	raul.pintura(pintura)
	raul.fechaInicioActividad(new Date())
  	raul.categorizar()
  	raul.pintura(pintura)
	venancio.fechaInicioActividad(new Date())
  	venancio.categorizar()
  	agencia.contratar(raul)
  	carlos.fechaInicioActividad(new Date())
  	carlos.categorizar()
  	carlos.pintura(pintura)
  	agencia.contratar(carlos)
  	venancio.pintura(pintura)
  	agencia.contratar(venancio)
  	agencia.contratar(emanuel)
  	agencia.contratar(marcos)
  	agencia.contratar(noelia)
  	agencia.contratar(silvana)
  	agencia.contratar(eliana)
  	agencia.contratar(dodain)

  }
  
}

test "la superficie total a pintar por aldo es 41" {
	fixture.aldoConAhorrosYCasa()
	assert.equals(41, aldo.superficieTotal())
}

test "el presupuesto maximo de aldo es 1200" {
	
	fixture.aldoConAhorrosYCasa()
	assert.equals(1200, aldo.presupuesto())
}

test "aldo no tiene suficientes ahorros para contratar a raul" {
	fixture.aldoConAhorrosYCasa()
	raul.pintura(pintura)
	raul.fechaInicioActividad(new Date())
	raul.categorizar()
	assert.notThat(aldo.tienePresupuestoPara(raul))
}

test "aldo si puede contratar a raul con 8000 de ahorros" {
	fixture.aldoConAhorrosYCasa()
	fixture.aumentarAhorro(aldo, 2000)
	raul.pintura(pintura)
	raul.fechaInicioActividad(new Date())
	raul.categorizar()
	assert.that(aldo.tienePresupuestoPara(raul))
}

test "aldo no puede contratar a raul con ahorros de 7000 y precio de pintura a 400" {
	fixture.aldoConAhorrosYCasa()
	fixture.aumentarAhorro(aldo,1000)
	fixture.aumentarPrecioLataPintura(pintura, 400)
	raul.fechaInicioActividad(new Date())
	raul.categorizar()
	raul.pintura(pintura)
	assert.notThat(aldo.tienePresupuestoPara(raul))
}

test "aldo si puede contratar a Carlos" {
	fixture.aldoConAhorrosYCasa()
	carlos.pintura(pintura)
	carlos.categorizar()
	carlos.fechaInicioActividad(new Date())
	assert.that(aldo.tienePresupuestoPara(carlos))
}

test "aldo no tiene presupuesto para contratar a Venancio" {
	fixture.aldoConAhorrosYCasa()
	venancio.pintura(pintura)
	venancio.categorizar()
	venancio.fechaInicioActividad(new Date())
	assert.notThat(aldo.tienePresupuestoPara(venancio))
}

test "aldo si tiene presupuesto para contratar a Venancio" {
	fixture.aldoConAhorrosYCasa()
	fixture.aumentarAhorro(aldo, 2000)
	venancio.pintura(pintura)
	venancio.categorizar()
	venancio.fechaInicioActividad(new Date())
	assert.that(aldo.tienePresupuestoPara(venancio))
}

test "la casa de Aldo no es complicada"{
	fixture.aldoConAhorrosYCasa()
	assert.notThat(aldo.casa().esComplicada())
}

test "la superficie de la casa de aldo es 41m2"{
	fixture.aldoConAhorrosYCasa()
	assert.equals(41,aldo.casa().superficie())
}


test "Aldo puede contratar a Carlos, Eduardo y Roger"{
	
	fixture.aldoConAhorrosYCasa()
	aldo.agencia(agencia)
	
	var fechaInicioActividad = new Date()
	var roger =  new Plomero()
	roger.categorizar()
	roger.fechaInicioActividad(fechaInicioActividad)	
	var eduardo = new Electricista(100.00)
	eduardo.categorizar()
	eduardo.fechaInicioActividad(fechaInicioActividad)
	
	fixture.agencia()
	agencia.contratar(roger)
	agencia.contratar(eduardo)

	var contratados = aldo.agencia().puedeContratarA(aldo)
	
	assert.that(contratados.contains(roger))
	assert.that(contratados.contains(eduardo))
	assert.that(contratados.contains(carlos))
	
}

test "Aldo contrata a roger y su presupuesto maximo ahora es 1160" {
	fixture.aldoConAhorrosYCasa()
	aldo.agencia(agencia)
	var roger =  new Plomero()
	roger.categorizar()
	roger.fechaInicioActividad(new Date())	
	agencia.contratar(roger)
	aldo.contratar(roger)
	assert.equals(1160, aldo.presupuesto())
}

test "Aldo contrata a Roger y a Carlos, obtiene 2 servicios" {
	fixture.aldoConAhorrosYCasa()
	aldo.agencia(agencia)
	var roger =  new Plomero()
	roger.categorizar()
	roger.fechaInicioActividad(new Date())	
	agencia.contratar(roger)
	carlos.categorizar()
	carlos.fechaInicioActividad(new Date())
	agencia.contratar(carlos)
	var contratados = aldo.agencia().puedeContratarA(aldo)
	assert.that(contratados.contains(roger))
	assert.that(contratados.contains(carlos))
}

test "Aldo no puede contratar a Marcos, no tiene presupuesto"{
	fixture.aldoConAhorrosYCasa()
	aldo.agencia(agencia)
	var marcos = new MMdeObras(50000)
	marcos.categorizar()
	marcos.fechaInicioActividad(new Date())
	agencia.contratar(marcos)
	aldo.contratar(marcos)
	assert.that(aldo.trabajosContratados().size()== 2)
	//validar que no tengo un trabajo mas y que haya bajado mi presupuesto
}

test "Aldo contrata a Roger y a Carlos y no es descuidado"{
	fixture.aldoConAhorrosYCasa()
	aldo.agencia(agencia)
	var roger =  new Plomero()
	roger.categorizar()
	roger.fechaInicioActividad(new Date())
	agencia.contratar(roger)
	carlos.pintura(pintura)
	carlos.categorizar()
	carlos.fechaInicioActividad(new Date())
	agencia.contratar(carlos)
	aldo.contratar(roger)
	aldo.contratar(carlos)
	assert.notThat(aldo.descuidado())
}

test "Aldo ahorra 1000000, contrata a Marcos y si es descuidado" {
	aldo.casa(new Casa(1,[habitacion, new Ambiente(1,2,3.5)]))
	aldo.ahorros(1000000)
	aldo.agencia(agencia)
	var marcos =  new MMdeObras(50000)
	marcos.categorizar()
	marcos.fechaInicioActividad(new Date())
	agencia.contratar(marcos)
	aldo.contratar(marcos)
	
	assert.that(aldo.trabajosContratados().size()==1)
	assert.equals(1, aldo.gastos().size())
	assert.that(aldo.presupuesto() < 200000)
	assert.that(aldo.descuidado())
}





