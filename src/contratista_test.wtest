import Aldo.*
import pintores.*
import pintura.*
import Cliente.*
import Casa.*
import Ambiente.*
import Agencia.*
import Arquitecto.*
import MMdeObras.*
import Plomero.*
import Electricista.*
import Albanil.*
import Damian.*
import Milena.*

object fixture {

	method agencia() {
		var emanuel = new Arquitecto(100000)
		var marcos = new MMdeObras(50000)
		var eliana = new MMdeObras(12000)
		raul.pintura(pintura)
		agencia.contratar(raul)
		carlos.pintura(pintura)
		agencia.contratar(carlos)
		venancio.pintura(pintura)
		agencia.contratar(venancio)
		agencia.contratar(emanuel)
		agencia.contratar(marcos)
		agencia.contratar(eliana)

	}

	method milena() {
		return milena
	}
	method eliana() {
		var mmo = new MMdeObras(12000)
		mmo.fechaInicioActividad(new Date())
		mmo.categorizar()
		return mmo
	}

	method silvina() {
		var plomero = new Plomero()
		plomero.fechaInicioActividad(new Date())
		plomero.categorizar()
		return plomero
	}
	
	method dodain(){
		var albanil = new Albanil(3)
		albanil.fechaInicioActividad(new Date())
		albanil.categorizar()
		return albanil
	}

	method noelia() {
		var electricista = new Electricista(250)
		electricista.fechaInicioActividad(new Date())
		electricista.categorizar()
		return electricista
	}
	method habitacion1() {
		return new Ambiente(4, 3, 3)
	}
	method habitacion2() {
		return new Ambiente(3, 2, 2)
	}
	method habitacion3() {
		return new Ambiente(3, 2, 3)
	}
	method habitacion4() {
		return new Ambiente(3, 4, 2)
	}
	method casaDeDamian() {
		return new Casa(4, [self.habitacion1(), self.habitacion2(), self.habitacion3(), self.habitacion4()])
	}
	method casaDeMilena() {
		return new Casa(3, [ self.habitacion1(), self.habitacion2() ])
	}
}



test "El Costo de Noelia para la casa de Damian" {
	var noelia = fixture.noelia()
	var casaDeDamian = fixture.casaDeDamian()
	assert.equals(2000, noelia.costoServicio(casaDeDamian))

}

test "El Costo de Silvina para la casa de Damian" {
	var silvina = fixture.silvina()
	silvina.recargo(25.00)
	var casaDeDamian = fixture.casaDeDamian()
	assert.equals(500, silvina.costoServicio(casaDeDamian))
}

test "El Costo de Noelia para la casa de Milena" {
	var noelia = fixture.noelia()
	var casaDeMilena = fixture.casaDeMilena()
	assert.equals(500, noelia.costoServicio(casaDeMilena))
}

test "El Costo de Eliana para la casa de Damian" {
	var eliana = fixture.eliana()
	var casaDeDamian = fixture.casaDeDamian()
	assert.equals(57600, eliana.costoServicio(casaDeDamian))
}

test "Milena solo puede contratar a Silvina " {
	
	milena.casa(fixture.casaDeMilena())
	milena.ahorros(2000)
	var silvina = new Plomero()
	var fechaInicioActividad = new Date(01,01,2016)
	silvina.fechaInicioActividad(fechaInicioActividad)
	silvina.antiguedad()
	silvina.categorizar()
	silvina.recargo(25.00)

	agencia.contratar(silvina)

	var contratados = agencia.puedeContratarA(milena)
	
	assert.equals(1, contratados.size())
	assert.that(contratados.contains(silvina))
}

test "Damian puede contratar a Noelia, Silvina y Dodain "{
	
	damian.casa(fixture.casaDeDamian())
	damian.ahorros(250000)
 
 	var fechaInicioActividad = new Date()
	var noelia = new Electricista(250)
		noelia.fechaInicioActividad(fechaInicioActividad)
		noelia.categorizar()
	var silvina = new Plomero()
		silvina.recargo(25.00)
		silvina.fechaInicioActividad(fechaInicioActividad)
		silvina.categorizar()
	var dodain = new Albanil(3)
		dodain.fechaInicioActividad(fechaInicioActividad)
		dodain.categorizar()
			
	agencia.contratar(noelia)
	agencia.contratar(silvina)
	agencia.contratar(dodain)
	
	var contratados = agencia.puedeContratarA(damian)
	
	assert.equals(3, contratados.size())
	assert.that(contratados.contains(noelia))
	assert.that(contratados.contains(silvina))
	assert.that(contratados.contains(dodain))
}

test "Damian ahorra 1500000, contrata a Eliana y Silvina y No es descuidado"{
	
	damian.casa(fixture.casaDeDamian())
	damian.ahorros(1500000)
	
 	var fechaInicioActividad = new Date()
	var silvina = new Plomero()
		silvina.recargo(25.00)
		silvina.fechaInicioActividad(fechaInicioActividad)
		silvina.categorizar()
	var eliana = fixture.eliana()
		eliana.fechaInicioActividad(fechaInicioActividad)
	
	agencia.contratar(silvina)
	agencia.contratar(eliana)
	
	damian.agencia(agencia)
	
	damian.contratar(silvina)
	damian.contratar(eliana)
	
	assert.notThat(damian.descuidado())
}

test "Milena ahorra $1500000, contrata a Eliana y a Silvina, Damian Si fue descuidado" {
	milena.casa(fixture.casaDeMilena())
	milena.ahorros(1500000)
	milena.agencia(agencia)
 	var fechaInicioActividad = new Date()
	var eliana = new MMdeObras(12000)
		eliana.fechaInicioActividad(fechaInicioActividad)
		eliana.categorizar()
	var silvina = new Plomero()
		silvina.recargo(25.00)
		silvina.fechaInicioActividad(fechaInicioActividad)
		silvina.categorizar()
	agencia.contratar(eliana)
	agencia.contratar(silvina)
	var contratados = agencia.puedeContratarA(milena)
	assert.equals(2, contratados.size())
	assert.that(contratados.contains(eliana))
	assert.that(contratados.contains(silvina))
	assert.notThat(damian.descuidado())
}

test "Milena contrata 2 veces a  Eliana y a Silvina"{
	
	milena.casa(fixture.casaDeMilena())
	milena.ahorros(1500000)
	milena.agencia(agencia)
	
 	var fechaInicioActividad = new Date()
	var silvina = new Plomero()
		silvina.recargo(25.00)
		silvina.fechaInicioActividad(fechaInicioActividad)
		silvina.categorizar()
	var eliana = fixture.eliana()
		eliana.fechaInicioActividad(fechaInicioActividad)
		eliana.categorizar()
	
	agencia.contratar(silvina)
	agencia.contratar(eliana)
	
	milena.contratar(silvina)
	milena.contratar(eliana)
	milena.contratar(eliana)
	
	var contratados = milena.contratistas()
	
	assert.equals(3, contratados.size())
	assert.that(contratados.contains(silvina))
	assert.that(contratados.contains(eliana))
	
}

test "Damian contrata a dodain y a Silvina y Dodain NO lo tomó de punto"{
	damian.casa(fixture.casaDeDamian())
	damian.ahorros(250000)
	damian.agencia(agencia)
	
 	var fechaInicioActividad = new Date()
	var silvina = new Plomero()
		silvina.recargo(25.00)
		silvina.fechaInicioActividad(fechaInicioActividad)
		silvina.categorizar()
		
	var dodain = fixture.dodain()
		dodain.fechaInicioActividad(fechaInicioActividad)
		dodain.categorizar()
	
	agencia.contratar(dodain)
	agencia.contratar(silvina)
	
	damian.contratar(dodain)
	damian.contratar(silvina)
	
	assert.notThat(damian.tomoDePunto(dodain))
}

test "Damian contrata Dodain, a Silvina y nuevamente a Dodain y Dodain lo tomo de punto"{
	damian.casa(fixture.casaDeDamian())
	damian.ahorros(250000)
	damian.agencia(agencia)
	
 	var fechaInicioActividad = new Date()
	var silvina = new Plomero()
		silvina.recargo(25.00)
		silvina.fechaInicioActividad(fechaInicioActividad)
		silvina.categorizar()
	var dodain = fixture.dodain()
		dodain.fechaInicioActividad(fechaInicioActividad)
		dodain.categorizar()
	
	agencia.contratar(dodain)
	agencia.contratar(silvina)
	
	damian.contratar(dodain)
	damian.contratar(silvina)
	damian.contratar(dodain)
	
	assert.that(damian.tomoDePunto(dodain))
}


test "Damian contrate a Dodain, luego a Silvina y nuevamente a Dodain. Saber cuanto le pago a Dodain"
{
	damian.casa(fixture.casaDeDamian())
	damian.ahorros(250000)
	damian.agencia(agencia)

 	var fechaInicioActividad = new Date()
	var silvina = new Plomero() 
		silvina.recargo(25.00)
		silvina.fechaInicioActividad(fechaInicioActividad)
		silvina.categorizar()
	var dodain = new Albanil(3)
		dodain.fechaInicioActividad(fechaInicioActividad)
		dodain.categorizar()
	
	agencia.contratar(silvina)
	agencia.contratar(dodain)

	damian.contratar(dodain)
	damian.contratar(silvina)
	damian.contratar(dodain)
	
	var fecha =  new Date()

	assert.equals(9600, damian.montoTrabajosRealizados(fecha, dodain))

}
